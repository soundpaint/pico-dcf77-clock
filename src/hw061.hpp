/*
 * HD44780 Driver for RP2040
 *
 * Copyright (C) 2023 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef HW061_HPP
#define HW061_HPP

#include <cstddef>
#include "hd44780-mpu-interface.hpp"

class HW061 : public HD44780_mpu_interface
{
public:
  HW061();
  HW061(const uint8_t addr);
  virtual ~HW061();
  virtual bool init();
  virtual transfer_mode_t
  select_transfer_mode(const transfer_mode_t preferred_transfer_mode) const;
  virtual size_t exec_instruction(const uint8_t op_code);
  virtual size_t write_data(const uint8_t data);
  virtual bool supports_backlight_ctrl() const;
  virtual bool set_backlight_enabled(const bool enable);
  virtual bool is_backlight_enabled() const;
private:
  static const uint8_t ADDR_PCF8574T;
  static const uint8_t ADDR_PCF8574AT;
  static const uint8_t MASK_BT;
  static const uint8_t MASK_EN;
  static const uint8_t MASK_RW;
  static const uint8_t MASK_RS;
  const uint8_t _addr;
  uint8_t _latch_data;
  bool set_latch_data(const uint8_t data);
  bool write_4_bits(const uint8_t nybble, const uint8_t bit_rs);
  bool send(const uint8_t data, const uint8_t bit_rs);
};

#endif /* HW061_HPP */

/*
 * Local variables:
 *   mode: c++
 *  coding: utf-8
 * End:
 */
