/*
 * DCF77 Radio Clock Driver for RP2040
 *
 * Copyright (C) 2023 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint>
 *
 * Author's web site: www.juergen-reuter.de
 */

#ifndef DCF77_HPP
#define DCF77_HPP

#include <pico/types.h>
#include <inttypes.h>
#include <stdio.h>

class DCF77
{
public:
  struct time_code_t {
    uint16_t civil_warning_bits;
    bool call_bit;
    bool dst_announce;
    bool dst;
    int8_t min;
    int8_t hour;
    int8_t day;
    int8_t dotw;
    int8_t month;
    int16_t year;
    int8_t estimated_signal_quality;
  };
  typedef void(* data_receive_callback_t) (uint64_t target_wallclock_us,
                                           time_code_t &time_code);
  static const uint16_t GPIO_LED_PIN;
  static const uint16_t GPIO_TCO_PIN;
  static const char *gpio_irq_str[];
  DCF77();
  DCF77(const uint16_t gpio_tco_pin, const bool inverse_tco,
        const bool display_pulses);
  bool init(data_receive_callback_t log_callback);
private:
  static const datetime_t START_DATETIME;
  static const uint8_t DAYS_PER_MONTH[];
  static DCF77 *instance;
  static data_receive_callback_t data_receive_callback;
  static uint8_t bit_index;
  static uint8_t bit[];
  static uint64_t bit_time_us[];
  static bool inverse_tco;
  static bool display_pulses;
  static bool level_low;
  static uint64_t prev_fall_time_us;
  static uint64_t prev_rise_time_us;
  const uint16_t _gpio_tco_pin;
  const bool _inverse_tco;
  const bool _display_pulses;
  static void render_gpio_event(char *buffer, const uint32_t events);
  static bool check_parity(const uint8_t index_start,
                           const uint8_t index_parity);
  static bool day_overflow(const uint8_t day, const uint8_t month);
  static bool serve_time_code(const uint64_t update_wallclock_us);
  static void add_bit(const uint8_t value, const uint64_t bit_wallclock_us);
  static void handle_falling_edge(const uint64_t edge_wallclock_us);
  static void handle_rising_edge(const uint64_t edge_wallclock_us);
  static void update_led_status(const bool high_level);
  static void tco_edge_handle(const uint gpio, const uint32_t events);
  void do_tco_edge_handle(const uint gpio, const uint32_t events);
};

#endif /* DCF77_HPP */

/*
 * Local variables:
 *   mode: c++
 *  coding: utf-8
 * End:
 */
