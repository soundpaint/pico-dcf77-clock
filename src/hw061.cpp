/*
 * HD44780 Driver for RP2040
 *
 * Copyright (C) 2023 JÃ¼rgen Reuter
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * As a special exception to the GNU General Public License, if you
 * distribute this file as part of a program that contains a
 * configuration script generated by Autoconf, you may include it
 * under the same distribution terms that you use for the rest of that
 * program.
 *
 * For updates and more info or contacting the author, visit:
 * <https://github.com/soundpaint>
 *
 * Author's web site: www.juergen-reuter.de
 */

#include "hw061.hpp"

#include <cstdio>
#include "hardware/i2c.h"

const uint8_t
HW061::ADDR_PCF8574T = 0x27u;

const uint8_t
HW061::ADDR_PCF8574AT = 0x3Fu;

const uint8_t
HW061::MASK_BT = 0b00001000;

const uint8_t
HW061::MASK_EN = 0b00000100;

const uint8_t
HW061::MASK_RW = 0b00000010;

const uint8_t
HW061::MASK_RS = 0b00000001;

HW061::HW061() : HW061(ADDR_PCF8574T)
{
}

HW061::HW061(const uint8_t addr)
  : _addr(addr), _latch_data(0xFFu)
{
}

HW061::~HW061()
{
}

bool
HW061::init()
{
  return true;
}

HD44780_mpu_interface::transfer_mode_t
HW061::select_transfer_mode(__unused const transfer_mode_t
                            preferred_transfer_mode) const
{
  // only support 4 bit transfer mode => ignore preference
  return TRANSFER_MODE_FOUR_BIT;
}

bool
HW061::set_latch_data(const uint8_t data)
{
  if (i2c_write_blocking(i2c_default, _addr, &data, 1, false) == 1) {
    _latch_data = data;
    return true;
  }
  printf("HW-061: failed writing I2C data 0x%02X\n", data);
  return false;
}

bool
HW061::write_4_bits(const uint8_t nybble, const uint8_t bit_rs)
{
  bool status_ok = true;
  const uint8_t bit_bt = _latch_data & MASK_BT;
  const uint8_t data = nybble | bit_bt | bit_rs;
  status_ok &= set_latch_data(data);
  status_ok &= set_latch_data(data | MASK_EN);
  sleep_us(1);
  status_ok &= set_latch_data(data);
  sleep_us(50);
  if (!status_ok) {
    printf("HW-061: failed writing HD44780 nybble: 0x%01X\n", nybble >> 4);
  }
  return status_ok;
}

bool
HW061::send(const uint8_t data, const uint8_t bit_rs)
{
  const uint8_t upper_nybble = data & 0xF0;
  const uint8_t lower_nybble = data << 4;
  bool status_ok = true;
  status_ok &= write_4_bits(upper_nybble, bit_rs);
  status_ok &= write_4_bits(lower_nybble, bit_rs);
  if (!status_ok) {
    printf("HW-061: failed writing HD44780 byte: 0x%02X\n", data);
  }
  return status_ok;
}

size_t
HW061::exec_instruction(const uint8_t op_code)
{
  return send(op_code, 0x00) ? 1 : 0;
}

size_t
HW061::write_data(const uint8_t data)
{
  return send(data, MASK_RS) ? 1 : 0;
}

bool
HW061::supports_backlight_ctrl() const
{
  return true;
}

bool
HW061::set_backlight_enabled(const bool enable)
{
  if (enable) {
    _latch_data |= MASK_BT;
  } else {
  _latch_data &= ~MASK_BT;
  }
  return set_latch_data(_latch_data);
}

bool
HW061::is_backlight_enabled() const
{
  return (_latch_data & MASK_BT) != 0x00u;
}

/*
 * Local variables:
 *   mode: c++
 *  coding: utf-8
 * End:
 */
